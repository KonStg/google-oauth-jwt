0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.3.5
3 info using node@v0.10.15
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/Nic/.npm/3a52ce78-.lock
10 verbose tar pack [ '/var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/tmp.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/tmp.tgz
12 verbose folder .
13 info prepublish google-oauth-jwt@0.1.0
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/Nic/.npm/1f1177db-tar.lock
16 silly lockFile 04a53cd5-40416-0-4976870066020638-tmp-tgz tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/tmp.tgz
17 verbose lock tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/tmp.tgz /Users/Nic/.npm/04a53cd5-40416-0-4976870066020638-tmp-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 04a53cd5-40416-0-4976870066020638-tmp-tgz tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/tmp.tgz
21 silly lockFile 04a53cd5-40416-0-4976870066020638-tmp-tgz tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/tmp.tgz
22 verbose tar unpack /var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/tmp.tgz
23 silly lockFile 47a2503c-40416-0-4976870066020638-package tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/package
24 verbose lock tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/package /Users/Nic/.npm/47a2503c-40416-0-4976870066020638-package.lock
25 silly lockFile 04a53cd5-40416-0-4976870066020638-tmp-tgz tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/tmp.tgz
26 verbose lock tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/tmp.tgz /Users/Nic/.npm/04a53cd5-40416-0-4976870066020638-tmp-tgz.lock
27 silly gunzTarPerm modes [ '755', '644' ]
28 silly gunzTarPerm extractEntry package.json
29 silly gunzTarPerm extractEntry .npmignore
30 silly gunzTarPerm extractEntry README.md
31 silly gunzTarPerm extractEntry LICENSE
32 silly gunzTarPerm extractEntry index.js
33 silly gunzTarPerm extractEntry lib/auth.js
34 silly gunzTarPerm extractEntry lib/request-jwt.js
35 silly gunzTarPerm extractEntry lib/token-cache.js
36 silly gunzTarPerm extractEntry test/test-google-oauth-jwt.js
37 silly gunzTarPerm extractEntry test/jwt-settings.json
38 silly gunzTarPerm extractEntry test/jwt-settings.json.sample
39 silly gunzTarPerm extractEntry test/key.pem
40 silly lockFile 47a2503c-40416-0-4976870066020638-package tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/package
41 silly lockFile 47a2503c-40416-0-4976870066020638-package tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/package
42 silly lockFile 04a53cd5-40416-0-4976870066020638-tmp-tgz tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/tmp.tgz
43 silly lockFile 04a53cd5-40416-0-4976870066020638-tmp-tgz tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/tmp.tgz
44 verbose tar pack [ '/Users/Nic/.npm/google-oauth-jwt/0.1.0/package.tgz',
44 verbose tar pack   '/var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/package' ]
45 verbose tarball /Users/Nic/.npm/google-oauth-jwt/0.1.0/package.tgz
46 verbose folder /var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/package
47 silly lockFile 47a2503c-40416-0-4976870066020638-package tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/package
48 verbose lock tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/package /Users/Nic/.npm/47a2503c-40416-0-4976870066020638-package.lock
49 silly lockFile b98d641e-ogle-oauth-jwt-0-1-0-package-tgz tar:///Users/Nic/.npm/google-oauth-jwt/0.1.0/package.tgz
50 verbose lock tar:///Users/Nic/.npm/google-oauth-jwt/0.1.0/package.tgz /Users/Nic/.npm/b98d641e-ogle-oauth-jwt-0-1-0-package-tgz.lock
51 silly lockFile 47a2503c-40416-0-4976870066020638-package tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/package
52 silly lockFile 47a2503c-40416-0-4976870066020638-package tar:///var/folders/d1/1b_krzv165zgp0cscz3bb0680000gn/T/npm-46233-AN-O_+7W/1378594040416-0.4976870066020638/package
53 silly lockFile b98d641e-ogle-oauth-jwt-0-1-0-package-tgz tar:///Users/Nic/.npm/google-oauth-jwt/0.1.0/package.tgz
54 silly lockFile b98d641e-ogle-oauth-jwt-0-1-0-package-tgz tar:///Users/Nic/.npm/google-oauth-jwt/0.1.0/package.tgz
55 silly lockFile 7a649ec2-m-google-oauth-jwt-0-1-0-package /Users/Nic/.npm/google-oauth-jwt/0.1.0/package
56 verbose lock /Users/Nic/.npm/google-oauth-jwt/0.1.0/package /Users/Nic/.npm/7a649ec2-m-google-oauth-jwt-0-1-0-package.lock
57 silly lockFile 7a649ec2-m-google-oauth-jwt-0-1-0-package /Users/Nic/.npm/google-oauth-jwt/0.1.0/package
58 silly lockFile 7a649ec2-m-google-oauth-jwt-0-1-0-package /Users/Nic/.npm/google-oauth-jwt/0.1.0/package
59 verbose tar unpack /Users/Nic/.npm/google-oauth-jwt/0.1.0/package.tgz
60 silly lockFile c5c48cb8-m-google-oauth-jwt-0-1-0-package tar:///Users/Nic/.npm/google-oauth-jwt/0.1.0/package
61 verbose lock tar:///Users/Nic/.npm/google-oauth-jwt/0.1.0/package /Users/Nic/.npm/c5c48cb8-m-google-oauth-jwt-0-1-0-package.lock
62 silly lockFile b98d641e-ogle-oauth-jwt-0-1-0-package-tgz tar:///Users/Nic/.npm/google-oauth-jwt/0.1.0/package.tgz
63 verbose lock tar:///Users/Nic/.npm/google-oauth-jwt/0.1.0/package.tgz /Users/Nic/.npm/b98d641e-ogle-oauth-jwt-0-1-0-package-tgz.lock
64 silly gunzTarPerm modes [ '755', '644' ]
65 silly gunzTarPerm extractEntry package.json
66 silly gunzTarPerm extractEntry .npmignore
67 silly gunzTarPerm extractEntry README.md
68 silly gunzTarPerm extractEntry LICENSE
69 silly gunzTarPerm extractEntry index.js
70 silly gunzTarPerm extractEntry lib/auth.js
71 silly gunzTarPerm extractEntry lib/request-jwt.js
72 silly gunzTarPerm extractEntry lib/token-cache.js
73 silly gunzTarPerm extractEntry test/test-google-oauth-jwt.js
74 silly gunzTarPerm extractEntry test/jwt-settings.json
75 silly gunzTarPerm extractEntry test/jwt-settings.json.sample
76 silly gunzTarPerm extractEntry test/key.pem
77 silly lockFile c5c48cb8-m-google-oauth-jwt-0-1-0-package tar:///Users/Nic/.npm/google-oauth-jwt/0.1.0/package
78 silly lockFile c5c48cb8-m-google-oauth-jwt-0-1-0-package tar:///Users/Nic/.npm/google-oauth-jwt/0.1.0/package
79 silly lockFile b98d641e-ogle-oauth-jwt-0-1-0-package-tgz tar:///Users/Nic/.npm/google-oauth-jwt/0.1.0/package.tgz
80 silly lockFile b98d641e-ogle-oauth-jwt-0-1-0-package-tgz tar:///Users/Nic/.npm/google-oauth-jwt/0.1.0/package.tgz
81 verbose chmod /Users/Nic/.npm/google-oauth-jwt/0.1.0/package.tgz 644
82 verbose chown /Users/Nic/.npm/google-oauth-jwt/0.1.0/package.tgz [ 501, 20 ]
83 silly lockFile 3a52ce78- .
84 silly lockFile 3a52ce78- .
85 silly publish { name: 'google-oauth-jwt',
85 silly publish   version: '0.1.0',
85 silly publish   author: { name: 'Nicolas Mercier', email: 'nicolas@extrabacon.net' },
85 silly publish   description: 'Implementation of Google OAuth 2.0 for server-to-server interactions, allowing secure use of Google APIs without interaction from an end-user.',
85 silly publish   keywords:
85 silly publish    [ 'google',
85 silly publish      'api',
85 silly publish      'oauth',
85 silly publish      'oauth2',
85 silly publish      'service account',
85 silly publish      'jwt',
85 silly publish      'token',
85 silly publish      'server to server' ],
85 silly publish   dependencies: { request: '*', debug: '~0.7.2' },
85 silly publish   devDependencies:
85 silly publish    { underscore: '*',
85 silly publish      async: '*',
85 silly publish      mocha: '*',
85 silly publish      chai: '*',
85 silly publish      'chai-spies': '*' },
85 silly publish   scripts: { test: 'mocha test/*.js -t 5000' },
85 silly publish   repository:
85 silly publish    { type: 'git',
85 silly publish      url: 'http://github.com/extrabacon/google-oauth-jwt' },
85 silly publish   homepage: 'http://github.com/extrabacon/google-oauth-jwt',
85 silly publish   bugs: { url: 'http://github.com/extrabacon/google-oauth-jwt/issues' },
85 silly publish   engines: { node: '>=0.8' },
85 silly publish   readme: '# google-oauth-jwt\n\nGoogle OAuth 2.0 authentication for server-to-server applications with Node.js.\n\nThis library generates [JWT](http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html) tokens to establish\nidentity for an API, without an end-user being involved. This is the preferred scenario for server-side communications.\nIt can be used to interact with Google APIs requiring access to user data (such as Google Drive, Calendar, etc.) for\nwhich URL-based callbacks and user authorization prompts are not appropriate.\n\nTokens are generated for a service account, which is created from the Google API console. Service accounts must also\nbe granted access to resources, using traditional assignation of permissions using the unique service account email\naddress.\n\nThe authentication process is implemented following the specifications found\n[here](https://developers.google.com/accounts/docs/OAuth2ServiceAccount).\n\nThis package also integrates with [request](https://github.com/mikeal/request) to seamlessly query Google RESTful APIs,\nwhich is optional. Integration with [request](https://github.com/mikeal/request) provides automatic requesting of\ntokens, as well as built-in token caching.\n\n## Documentation\n\n### Installation\n```bash\nnpm install google-oauth-jwt\n```\n\n### How does it work?\n\nWhen using Google APIs from the server (or any non-browser based application), authentication is performed through a\nService Account, which is a special account representing your application. This account has a unique email address that\ncan be used to grant permissions to. If a user wants to give access to his Google Drive to your application, he must share the files or folders with the Service Account using the supplied email address.\n\nNow that the Service Account has permission to some user resources, the application can query the API with OAuth2.\nWhen using OAuth2, authentication is performed using a token that has been obtained first by submitting a JSON Web\nToken (JWT). The JWT identifies the user as well as the scope of the data he wants access to. The JWT is also signed\nwith a cryptographic key to prevent tampering. Google generates the key and keeps only the public key for validation.\nYou must keep the private key secure with your application so that you can sign the JWT in order to guarantee its authenticity.\n\nThe application requests a token that can be used for authentication in exchange with a valid JWT. The resulting token\ncan then be used for multiple API calls, until it expires and a new token must be obtained by submitting another JWT.\n\n### Creating a Service Account and generating the encryption key\n\n1. From the [Google API Console](https://code.google.com/apis/console/), create a [service account](https://developers.google.com/console/help/#service_accounts).\n\n2. Download the generated P12 key.\n\n   IMPORTANT: keep a copy of the key, Google keeps only the public key.\n\n3. Convert the key to PEM, so we can use it from the Node [crypto](http://nodejs.org/api/crypto.html) module.\n\n   To do this, run the following in Terminal:\n   ```bash\n   openssl pkcs12 -in downloaded-key-file.p12 -out your-key-file.pem -nodes\n   ```\n\n   The password for the key is `notasecret`, as mentioned when you downloaded the key from Google.\n\n### Granting access to resources to be requested through an API\n\nIn order to query resources using the API, access must be granted to the Service Account. Each Google application that\nhas security settings must be configured individually. Access is granted by assigning permissions to the service\naccount, using its email address found in the API console.\n\nFor example, in order to list files in Google Drive, folders and files must be shared with the service account email\naddress. Likewise, to access a calendar, the calendar must be shared with the service account.\n\n### Querying Google APIs with "request"\n\nIn this example, we use a modified instance of [request](https://github.com/mikeal/request) to query the\nGoogle Drive API. [request](https://github.com/mikeal/request) is a full-featured HTTP client which can be extended with Google OAuth2 capabilities by using the `requestWithJWT` method. The modified module will request and cache tokens automatically when supplied with a `jwt` setting in the options.\n\n```javascript\n// obtain a JWT-enabled version of request\nvar request = require(\'google-oauth-jwt\').requestWithJWT();\n\nrequest({\n  url: \'https://www.googleapis.com/drive/v2/files\',\n  jwt: {\n    // use the email address of the service account, as seen in the API console\n    email: \'my-service-account@developer.gserviceaccount.com\',\n    // use the PEM file we generated from the downloaded key\n    keyFile: \'my-service-account-key.pem\',\n    // specify the scopes you wish to access - each application has different scopes\n    scopes: [\'https://www.googleapis.com/auth/drive.readonly\']\n  }\n}, function (err, res, body) {\n\tconsole.log(JSON.parse(body));\n});\n```\n\nNote that the `options` object includes a `jwt` object we use to configure the JWT generation. The token will then\nautomatically be requested and inserted in the authorization header. It will also be cached and reused for subsequent calls using the same service account and scopes.\n\nIf you want to use a specific version of `request`, simply pass it to the the `requestWithJWT` method as such:\n\n```javascript\n// my version of request\nvar request = require(\'request\');\n// my modified version of request\nrequest = require(\'google-oauth-jwt\').requestWithJWT(request);\n```\n\n### Requesting the token manually\n\nIf you wish to simply request the token for use with a Google API, use the `authenticate` method.\n\n```javascript\nvar googleAuth = require(\'google-oauth-jwt\');\n\ngoogleAuth.authenticate({\n  // use the email address of the service account, as seen in the API console\n  email: \'my-service-account@developer.gserviceaccount.com\',\n  // use the PEM file we generated from the downloaded key\n  keyFile: \'my-service-account-key.pem\',\n  // specify the scopes you wish to access\n  scopes: [\'https://www.googleapis.com/auth/drive.readonly\']\n}, function (err, token) {\n  console.log(token);\n});\n```\n\nIf you want to use the built-in token cache, use the `TokenCache` class. Tokens are cached using the email address and\nthe scopes as the key.\n\n```javascript\nvar TokenCache = require(\'google-oauth-jwt\').TokenCache,\n    tokens = new TokenCache();\n\ntokens.get({\n  // use the email address of the service account, as seen in the API console\n  email: \'my-service-account@developer.gserviceaccount.com\',\n  // use the PEM file we generated from the downloaded key\n  keyFile: \'my-service-account-key.pem\',\n  // specify the scopes you wish to access\n  scopes: [\'https://www.googleapis.com/auth/drive.readonly\']\n}, function (err, token) {\n  console.log(token);\n});\n```\n\nUsing `TokenCache` will request only one token for multiple concurrent requests to `get`. A new token request will\nautomatically be issued if the token is expired.\n\n### Encoding the JWT manually\n\nIt is also possible to encode the JWT manually using the `encodeJWT` method.\n\n```javascript\nvar googleAuth = require(\'google-oauth-jwt\');\n\ngoogleAuth.encodeJWT({\n  // use the email address of the service account, as seen in the API console\n  email: \'my-service-account@developer.gserviceaccount.com\',\n  // use the PEM file we generated from the downloaded key\n  keyFile: \'my-service-account-key.pem\',\n  // specify the scopes you which to access\n  scopes: [\'https://www.googleapis.com/auth/drive.readonly\']\n}, function (err, jwt) {\n  console.log(jwt);\n});\n```\n\n### Specifying JWT generation options\n\nThe following options can be specified in order to generate the JWT used for authentication:\n\n```javascript\nvar options = {\n\n  // the email address of the service account (required)\n  // this information is obtained via the API console\n  email: \'my-service-account@developer.gserviceaccount.com\',\n\n  // an array of scopes uris to request access to (required)\n  // different scopes are available for each application, refer to the app documentation\n  // scopes are limitations applied to the API access\n  scopes: [...],\n\n  // the cryptographic key as a string, can be the contents of the PEM file\n  // the key will be used to sign the JWT and validated by Google OAuth\n  key: \'KEY_CONTENTS\',\n\n  // the path to the PEM file to use for the cryptographic key (ignored if \'key\' is also defined)\n  // the key will be used to sign the JWT and validated by Google OAuth\n  keyFile: \'path/to/key.pem\',\n\n  // the duration of the requested token in milliseconds (optional)\n  // default is 1 hour (60 * 60 * 1000), which is the maximum allowed by Google\n  expiration: 3600000,\n\n  // if access is being granted on behalf of someone else, specifies who is impersonating the service account\n  delegationEmail: \'email_address@mycompany.com\'\n\n};\n```\n\nFor more information:\n[https://developers.google.com/accounts/docs/OAuth2ServiceAccount#formingclaimset](https://developers.google.com/accounts/docs/OAuth2ServiceAccount#formingclaimset)\n\nOptions are used to encode the JWT that will be sent to Google OAuth servers in order to issue a token that can then be\nused for authentification to Google APIs. The same options are used for `authenticate`, `TokenCache.get` or the `jwt`\nsetting passed to `request` options.\n\n## Running the tests\n\nRunning the unit tests for `google-oauth-jwt` requires a valid Service Account, its encryption key and a URL to test.\n\nTo launch the tests, first configure your account in "test/jwt-settings.json" using the sample file. Make sure your\ntest URL also matches with the requested scopes. The tests do not make any assumption on the results from the API, so\nyou can use any OAuth2 enabled API.\n\nFor example, to run the tests by listing Google Drive files, you can use the following configuration:\n\n```javascript\n{\n  "email": "my-account@developer.gserviceaccount.com",\n  "scopes": ["https://www.googleapis.com/auth/drive.readonly"],\n  "keyFile": "./test/key.pem",\n  "test_url": "https://www.googleapis.com/drive/v2/files"\n}\n```\n\nTo run the tests:\n\n```bash\nnpm test\n```\n\nor\n\n```bash\nmocha -t 5000\n```\n\nThe 5 seconds timeout is required since some tests make multiple calls to the API. If you get timeout exceeded errors,\nyou can bump this value since not all Google APIs may respond with the same timings.\n\n## Debugging\n\nTo turn on debugging, add "google-oauth-jwt" to your `DEBUG` variable. Debugging events include JWT generation, token\nrequests to the OAuth server and token expirations through `TokenCache`.\n\nFor example, to turn on debugging while running the unit tests, use this:\n\n```bash\nDEBUG=google-oauth-jwt mocha -t 5000\n```\n\n## Changelog\n\n* 0.1.1: re-introduced debugging, now with [debug](https://github.com/visionmedia/debug)\n* 0.1.0: improved documentation, introduced unit tests and refactoring aimed at testability\n* 0.0.7: fixed token expiration check\n* 0.0.6: fixed request function call when using a URI string without options\n* 0.0.5: token now passed using Authorization header (thank you jpd236)\n* 0.0.4: fixed pending callbacks accumulating indefinitely in TokenCache\n* 0.0.3: introduction of TokenCache\n* 0.0.2: improved error handling and documentation\n* 0.0.1: initial version\n\n## Compatibility\n\n+ Tested with Node 0.8\n+ Tested on Mac OS X 10.8\n\n## Dependencies\n\n+ [request](https://github.com/mikeal/request)\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013, Nicolas Mercier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n',
85 silly publish   readmeFilename: 'README.md',
85 silly publish   _id: 'google-oauth-jwt@0.1.0',
85 silly publish   dist: { shasum: '30c1fdec82011d4ab3d27c57db6c996ebe4a06d0' },
85 silly publish   _from: '.' }
86 verbose url raw google-oauth-jwt
87 verbose url resolving [ 'https://registry.npmjs.org/', './google-oauth-jwt' ]
88 verbose url resolved https://registry.npmjs.org/google-oauth-jwt
89 info trying registry request attempt 1 at 18:47:20
90 http PUT https://registry.npmjs.org/google-oauth-jwt
91 http 409 https://registry.npmjs.org/google-oauth-jwt
92 verbose url raw google-oauth-jwt
93 verbose url resolving [ 'https://registry.npmjs.org/', './google-oauth-jwt' ]
94 verbose url resolved https://registry.npmjs.org/google-oauth-jwt
95 info trying registry request attempt 1 at 18:47:22
96 http GET https://registry.npmjs.org/google-oauth-jwt
97 http 200 https://registry.npmjs.org/google-oauth-jwt
98 error publish fail Cannot publish over existing version.
98 error publish fail Update the 'version' field in package.json and try again.
98 error publish fail
98 error publish fail If the previous version was published in error, see:
98 error publish fail     npm help unpublish
98 error publish fail
98 error publish fail To automatically increment version numbers, see:
98 error publish fail     npm help version
99 error System Darwin 12.4.0
100 error command "node" "/usr/local/bin/npm" "publish"
101 error cwd /Users/Nic/dev/google-oauth-jwt
102 error node -v v0.10.15
103 error npm -v 1.3.5
104 error code EPUBLISHCONFLICT
105 verbose exit [ 1, true ]
